void inorder(TreeNode<int> *root, vector<int> &inn)
{
    if(root==NULL)
    {
        return;
    }
    inorder(root->left,inn);
    inn.push_back(root->data);
    inorder(root->right,inn);
}


vector<int> mergeArrays(vector<int> &a, vector<int> &b)
{
    vector<int> ans(a.size() + b.size());
    int i =0, j=0;
    int k=0;
    while(i<a.size()&&j<b.size())
    {
        if(a[i]<b[j])
        {
            ans[k++] = a[i];
            i++;
        }
        else{
             ans[k++] = b[j];
             j++;
        }
    }
    while(i<a.size())
    {
         ans[k++] = a[i];
            i++;
    }
    while(j<b.size())
    {
         ans[k++] = b[j];
             j++;
    }
    return ans;
}
TreeNode<int>* intoBst(int s, int e, vector<int> &inn)
{
    if(s>e)
    return NULL;

    int mid = (s+e)/2;
    TreeNode<int>* root = new TreeNode<int>(inn[mid]);
    root->left = intoBst(s,mid-1, inn);
    root->right = intoBst(mid+1, e, inn);
 return root;
}


TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2){
    

vector<int> bst1, bst2;
inorder(root1, bst1);
inorder(root2,bst2);

vector<int> mergeArray= mergeArrays(bst1,bst2);
int s =0;
int e = mergeArray.size()-1;
return intoBst(s, e, mergeArray );
}















https://www.codingninjas.com/codestudio/problems/h_920474?leftPanelTab=1&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbar
